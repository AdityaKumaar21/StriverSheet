class Solution {
public:
    int helper(string &s, string &t,int i,int j,vector<vector<int>>&dp){
        if(j<0 and i>=0){
            return i+1;
        }
        if(i<0 and j>=0){
            return j+1;
        }
        if(i<0 and j<0){
            return 0;
        }
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        if(s[i]==t[j]){
            return dp[i][j]=0+helper(s,t,i-1,j-1,dp);
        }
        
        // int insert=-1;
        // int del=-1;
        // int re=-1;
        int insert=1+helper(s,t,i,j-1,dp);
        int del=1+helper(s,t,i-1,j,dp);
        int re=1+helper(s,t,i-1,j-1,dp);
        return dp[i][j]=min(min(insert,del),re);
    }
    int minDistance(string word1, string word2) {
        vector<vector<int>>dp(word1.length(),vector<int>(word2.length()+1,-1));
        return helper(word1,word2,word1.size()-1,word2.size()-1,dp);
    }
};
